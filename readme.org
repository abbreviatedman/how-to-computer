* How To Computer

This is a guide to creating the perfect computer for Colin Jaffe. But some of it may be perfect for you, and some of it may be close enough to perfect for you that you can get it the rest of the way on your own.

More than a guide, though, this effectively /is/ my computer system! I'll explain exactly how Real Soon.


** Fonts

Here are the steps to get my current collection of fonts.

Download Input Sans from the [[https://input.djr.com/][Input Homepage]].

=cd= into the directory they're in (probably Downloads!) and run =unzip= on the zipfile.

Make a local fonts directory and move all Input Sans fonts into it with the following commands:

#+begin_src sh
  mkdir -p ~/.local/share/fonts
  mv [path to InputSans directory]/*.ttf ~/.local/share/fonts
#+end_src

Install the following fonts:

#+begin_src sh
  sudo apt install -y \
       fonts-noto \
       fonts-font-awesome \
       fonts-cardo
#+end_src

Then place this as your fontconfig config file in =~/.config/fontconfig/fonts.conf=:

#+begin_src xml :tangle ~/.config/fontconfig/fonts.conf
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "urn:fontconfig:fonts.dtd">
<fontconfig>
  <!-- Font settings for Cardo -->
  <match>
    <test name="family"><string>Cardo</string></test>
    <test name="lang"><string>en</string></test>
    <edit name="family" mode="assign">
      <string>Cardo</string>
    </edit>
  </match>

  <!-- Alias Font Awesome for symbols -->
  <match target="pattern">
    <test name="family"><string>FontAwesome</string></test>
    <edit mode="assign" name="family">
      <string>FontAwesome</string>
    </edit>
  </match>

  <!-- Alias Noto Color Emoji for emojis -->
  <match target="pattern">
    <test name="family"><string>Noto Color Emoji</string></test>
    <edit mode="assign" name="family">
      <string>Noto Color Emoji</string>
    </edit>
  </match>
</fontconfig>
#+end_src

Let's define our default fonts for Emacs.

#+name: font-definitions
#+begin_src emacs-lisp
  (use-package emacs
    :init
    (defvar crj--fixed-pitch-font "Hack")
    (defvar crj--variable-pitch-coding-font "Input Sans")
    (defvar crj--variable-pitch-font "Cardo")
    (defvar crj--coding-font crj--variable-pitch-coding-font)
    (defvar crj--emoji-font "Noto Color Emoji")
    (defvar crj--default-font-size 180)

    :config
    (when (member "Noto Color Emoji" (font-family-list))
      (set-fontset-font
       "fontset-default" 'unicode
       (font-spec :family "Noto Color Emoji")
       nil
       'prepend))

    (set-face-attribute 'default nil
			:font crj--coding-font
			:height crj--default-font-size)

    (set-face-attribute 'fixed-pitch nil
			:font crj--coding-font
			:height 0.8)

    (set-face-attribute 'variable-pitch nil
			:font crj--variable-pitch-font
			:height 1.0
			:weight 'regular))
#+end_src

Let's set our prose files to use variable pitch as their main fonts.

#+name: variable-pitch-setup
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook #'variable-pitch-mode)
  (add-hook 'markdown-mode-hook #'variable-pitch-mode)
#+end_src

Now, set /some/ modes to use a fixed pitch font. This is for places where indenting to match characters in above lines is meaningful, which is suprisingly rare.

#+name: set-fixed-pitch-modes
#+begin_src emacs-lisp
  (use-package emacs
    :preface
    (defun crj--use-fixed-pitch ()
      "Make the current buffer use a fixed pitch.

  Sometimes I really do want fixed-pitch for alignment, such as with terminals."
      (interactive)
      (set (make-local-variable 'buffer-face-mode-face) 'crj--monospace)
      (buffer-face-mode t))

    (defconst crj--fixed-pitch-mode-hooks
      '(emacs-lisp-mode-hook
	calendar-mode-hook
	proced-mode-hook
	cfw:calendar-mode-hook
	minibuffer-setup-hook
	mu4e-headers-mode-hook
	magit-log-mode-hook))
    (defface crj--monospace
      '((t
	 :family "Hack"
	 :foundry unspecified
	 :width normal
	 :height 1.0
	 :weight normal
	 :slant normal
	 :foreground "#505050"
	 :distantForeground unspecified
	 :background "#f8f8f8"
	 :underline nil
	 :overline nil
	 :strike-through nil
	 :box nil
	 :inverse nil
	 :stipple nil
	 :font "Hack"
	 :fontset unspecified
	 :extend nil))
      "Face for monospace fonts.")
    :init
    (dolist (hook crj--fixed-pitch-mode-hooks)
      (add-hook hook #'crj--use-fixed-pitch)))
#+end_src

And make line numbers monospaced, so they don't jump around when they go from single-digit to double and so on.

#+name: make-line-numbers-monospaced
#+begin_src emacs-lisp
  (use-package emacs
    :preface
    (defconst crj--line-number-faces '(line-number
				       line-number-current-line
				       line-number-major-tick
				       line-number-minor-tick))

    (defun crj-make-line-number-face-monospace (&rest args)
      "Makes line numbers monospace and fixes them in size."
      (interactive)
      (dolist (face crj--line-number-faces)
	(set-face-attribute face nil
			    :family crj--fixed-pitch-font
			    :height 1.0))
      args)

    :init
    (add-hook 'emacs-startup-hook #'crj-make-line-number-face-monospace))
#+end_src

There! Now you have good-looking fonts, each with their own special purpose. And you also feel special now! Special and weird and unique and fully fully fontified.

** Git

- Install keychain to store your SSH passwords with =sudo apt install -y keychain=
- Generate the key with =ssh-keygen -t ed25519 -C "[your email address]"=
- Add the key to the ssh agent with =ssh-add ~/.ssh/id_ed25519=
- Run keychain on terminal launch by adding the following to the =.profile= file:

#+NAME: keychain-settings
#+BEGIN_SRC sh
  eval `keychain --agents ssh --eval ~/.ssh/id_ed25519`
#+END_SRC

- Add the contents of =~/.ssh/id_ed25519.pub= as a new SSH key in GitHub and GitLab's settings.
- Create a Git Config file with the following contents:

#+BEGIN_SRC ini :tangle ~/.gitconfig
[user]
	name = Colin Jaffe
	email = abbreviatedman@posteo.net
[core]
	excludesFile = ~/.gitignore-global
	ignorecase = false
	editor = emacsclient -c
[interactive]
	singleKey = true
[init]
	defaultBranch = main
[pull]
	rebase = false
[push]
	followTags = true
[gitlab]
	user = abbreviatedman
[github]
	user = abbreviatedman
#+END_SRC

** Waybar

This is the configuration for Waybar, Sway's status bar. It tells me things like the time and general computer state--battery, network connection, spare memory, etc.

I haven't added anything to it, only disabled modules I don't use, switched it to the left side, and broke text lines to make the width narrower. Programmers prefer things to be vertical, for reasons we'll get into at some point.

#+BEGIN_SRC jsonc :tangle ~/.config/waybar/config.jsonc
{
     "position": "left", // Waybar position (top|bottom|left|right)
    "width": 10, // Waybar width
    "spacing": 4, // Gaps between modules (4px)
    "modules-left": [
        "sway/workspaces",
        "sway/mode",
        "sway/scratchpad",
        "custom/media"
    ],
    "modules-right": [
        "mpd",
        "idle_inhibitor",
        "pulseaudio",
        "network",
        "power-profiles-daemon",
        "cpu",
        "memory",
        "temperature",
        "backlight",
        "keyboard-state",
        "sway/language",
        "battery",
        "battery#bat2",
        "clock",
        "tray",
        "custom/power"
    ],
    "keyboard-state": {
        "numlock": true,
        "capslock": true,
        "format": "{name} {icon}",
        "format-icons": {
            "locked": "",
            "unlocked": ""
        }
    },
    "sway/mode": {
        "format": "<span style=\"italic\">{}</span>"
    },
    "sway/scratchpad": {
        "format": "{icon} {count}",
        "show-empty": false,
        "format-icons": ["", ""],
        "tooltip": true,
        "tooltip-format": "{app}: {title}"
    },
    "mpd": {
        "format": "{stateIcon} {consumeIcon}{randomIcon}{repeatIcon}{singleIcon}{artist} - {album} - {title} ({elapsedTime:%M:%S}/{totalTime:%M:%S}) ⸨{songPosition}|{queueLength}⸩ {volume}% ",
        "format-disconnected": "Disconnected ",
        "format-stopped": "{consumeIcon}{randomIcon}{repeatIcon}{singleIcon}Stopped ",
        "unknown-tag": "N/A",
        "interval": 5,
        "consume-icons": {
            "on": " "
        },
        "random-icons": {
            "off": "<span color=\"#f53c3c\"></span> ",
            "on": " "
        },
        "repeat-icons": {
            "on": " "
        },
        "single-icons": {
            "on": "1 "
        },
        "state-icons": {
            "paused": "",
            "playing": ""
        },
        "tooltip-format": "MPD (connected)",
        "tooltip-format-disconnected": "MPD (disconnected)"
    },
    "idle_inhibitor": {
        "format": "{icon}",
        "format-icons": {
            "activated": "",
            "deactivated": ""
        }
    },
    "tray": {
        "spacing": 10
    },
    "clock": {
        "tooltip-format": "<big>{:%Y %B}</big>\n<tt><small>{calendar}</small></tt>",
        "format-alt": "{:%Y-%m-%d}"
    },
    "cpu": {
        "format": "{usage}% ",
        "tooltip": false
    },
    "memory": {
        "format": "{}% "
    },
    "temperature": {
        "critical-threshold": 80,
        "format": "{temperatureC}°C {icon}",
        "format-icons": ["", "", ""]
    },
    "backlight": {
        "format": "{percent}% {icon}",
        "format-icons": ["", "", "", "", "", "", "", "", ""]
    },
    "battery": {
        "states": {
            "warning": 30,
            "critical": 15
        },
        "format": "{capacity}% {icon}",
        "format-full": "{capacity}% {icon}",
        "format-charging": "{capacity}% ",
        "format-plugged": "{capacity}% ",
        "format-alt": "{time} {icon}",
        "format-icons": ["", "", "", "", ""]
    },
    "battery#bat2": {
        "bat": "BAT2"
    },
    "power-profiles-daemon": {
      "format": "{icon}",
      "tooltip-format": "Power profile: {profile}\nDriver: {driver}",
      "tooltip": true,
      "format-icons": {
        "default": "",
        "performance": "",
        "balanced": "",
        "power-saver": ""
      }
    },
    "network": {
        "format-wifi": "{essid}\n({signalStrength}%) ",
        "format-ethernet": "{ipaddr}/{cidr} ",
        "tooltip-format": "{ifname}\nvia {gwaddr} ",
        "format-linked": "{ifname}\n(No IP) ",
        "format-disconnected": "Disconnected ⚠",
        "format-alt": "{ifname}:\n{ipaddr}/{cidr}"
    },
    "pulseaudio": {
        "format": "{volume}% {icon}\n{format_source}",
        "format-bluetooth": "{volume}% {icon}\n{format_source}",
        "format-bluetooth-muted": " {icon}\n{format_source}",
        "format-muted": " {format_source}",
        "format-source": "{volume}% ",
        "format-source-muted": "",
        "format-icons": {
            "headphone": "",
            "hands-free": "",
            "headset": "",
            "phone": "",
            "portable": "",
            "car": "",
            "default": ["", "", ""]
        },
        "on-click": "pavucontrol"
    },
    "custom/media": {
        "format": "{icon} {text}",
        "return-type": "json",
        "max-length": 40,
        "format-icons": {
            "spotify": "",
            "default": "🎜"
        },
        "escape": true,
        "exec": "$HOME/.config/waybar/mediaplayer.py 2> /dev/null" // Script in resources folder
    },
    "custom/power": {
        "format" : "⏻ ",
		"tooltip": false,
		"menu": "on-click",
		"menu-file": "$HOME/.config/waybar/power_menu.xml", // Menu file in resources folder
		"menu-actions": {
			"shutdown": "shutdown",
			"reboot": "reboot",
			"suspend": "systemctl suspend",
			"hibernate": "systemctl hibernate"
		}
    }
}
#+END_SRC

** General Computer Setup

So you bought yourself a new computer! Did you really need to? I hope you really needed to!

The reason I'm writing this document is that I lost my ThinkPad, bought a Pocket Reform that I almost immediately messed up by remapping the keys in such a way that I can't use its weird startup keyboard shortcut, and then somehow (still not sure how) deeply messed up the system that was on my Galago Pro.

So now I've wiped the Galago Pro and goddamn if I'm not going to configure it the right way this time, and make sure that when this happens again--and, obviously, that's a when not an if--I'll be more ready to start from scratch.

*** What System To Use?

I'm writing this document assuming you're using a Debian GNU+Linux system. That will make these directions match up perfectly if you are. However, with some minor tweaks you can use this setup with any Linux system, or, with more tweaks, macOS or Windows.

*** Set Up Password Entry Properly

I'm not a security expert. I'm not sure I'm really an expert in any computer system or sub-system, frankly--I'm more a dilettante than a delver.

All of which is to say that probably this section is wrong.

**** Set Sudo Privileges Up Right

If you find yourself unable to do sudo things without changing to root, this is how you can set things up to do sudo things without changing to root.

Your sudoers file (=/etc/sudoers= on Debian) has the following line:

#+BEGIN_SRC
root ALL=(ALL:ALL) ALL
#+END_SRC

What this does is say that the root user has those privileges.

After it, you should add an equivalent line, but with your username in place of =root=:

Let's test it by running =sudo visudo=, which should open the sudoers file in your default editor with sudo privileges.

**** Switching From No Password Feedback To Masked Password Feedback

By default, sudo password entry gives you no feedback as you type the password. No characters appear at all, as if you're not typing. This can be quite confusing the first time you encounter it, and leaves you more prone to mistyping your password. It's /annoying/, and the reason we do it, so that no one looking over our shoulder knows our password's length, is a truly useless security measure.

In the sudoers file, let's fix that. Use =sudo visudo= to open it up again, and change this line:

#+BEGIN_SRC
  Defaults env_reset
#+END_SRC

to:

#+BEGIN_SRC
  Defaults env_reset,pwfeedback
#+END_SRC

Now when you type your passwords in the command line, you'll get asterisks for each character you type.

** Debian Package Sources

The first thing you should do on a Debian system on a computer where software availability is more important than stability is switch to the Debian Unstable package sources.

#+BEGIN_SRC sh :tangle /sudo::/etc/apt/sources.list
  deb https://deb.debian.org/debian/ unstable main contrib non-free non-free-firmware
  deb-src https://deb.debian.org/debian/ unstable main contrib non-free non-free-firmware test
#+END_SRC

** VS Code

I may try to do this more automatically through the terminal, but, for now, go to VS Code's site and download their =.deb= file. Then run =sudo apt install [path to .deb file]=, and you're good.

** Emacs

The greatest operating system ever created.

*** Look and Feel

**** Theme

#+name: theme
#+begin_src emacs-lisp
  (use-package modus-themes
     :vc (modus-themes :url "https://gitlab.com/protesilaos/modus-themes" :branch main)
    ;; :pin gnu
    :config
    (set-var modus-themes-italic-constructs t
	     modus-themes-bold-constructs t
	     modus-themes-mixed-fonts t
	     modus-themes-variable-pitch-ui t
	     modus-themes-completions '(((matches . (intense background underline bold))
					 (selection . (accented intense bold))))
	     modus-themes-headings '((0 . (variable-pitch  1.8))
				     (1 . (variable-pitch  1.8))
				     (2 . (variable-pitch  1.6))
				     (3 . (variable-pitch  1.4))
				     (4 . (variable-pitch  1.2)))
	     modus-themes-common-palette-overrides modus-themes-preset-overrides-intense)
    ;; (dolist (face '(modus-themes-prose-code modus-themes-fixed-pitch))
    ;; (set-face-attribute face nil :family crj--fixed-pitch-font :height 1.0))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme 'modus-operandi-deuteranopia :no-confirm))
#+end_src

**** Org Mode

#+name org-look-and-feel
#+begin_src emacs-lisp
  (setq-org-link-descriptive nil)
#+end_src

**** Line Numbers

It's been a long time since I felt this way, but I bet I would have been shocked at some point in my life to learn how much I would someday care about the numbers that go next to the lines in a document.

***** Basic Line Number Settings

Sets up line numbers to be (almost) everywhere, with the major exception being terminal modes, where they're largely unnecessary.

Also sets up line numbers to be relative to the current line number. I like to use relative line numbers because they make line-wise work easier if you're using Evil Mode. Which I do.

#+name: line-number-settings
#+begin_src emacs-lisp
  (use-package emacs
    :init
    (defun crj--turn-off-line-numbers ()
  "Turns off line numbers. Meant to be added as a hook."
      (display-line-numbers-mode 0))

    (setq display-line-numbers-type 'relative
	  magit-disable-line-numbers nil
	  magit-section-disable-line-numbers nil)
    (global-display-line-numbers-mode t)
    (defconst crj--hooks-for-modes-without-line-numbers '(term-mode-hook
							  vterm-mode-hook
							  shell-mode-hook
							  treemacs-mode-hook
							  eshell-mode-hook))
    (dolist (hook crj--hooks-for-modes-without-line-numbers)
      (add-hook hook #'crj--turn-off-line-numbers)))
#+end_src

**** Wrapping Lines

Turn on what in other editors would just be called "word wrap", but of course it isn't in Emacs.

#+name: word-wrap
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

*** Evil Keybindings Setup

**** Leader Key

First, let's use General, which commands my army of Evil keybindings. As the name suggests, it also works with leaders.

#+name: define-leader-key
#+begin_src emacs-lisp
  (use-package general
    :init
    (general-create-definer leader
      :states '(normal motion visual)
      :keymaps 'override
      :prefix "SPC"))
#+end_src

**** Handling Escape Better

Makes escape generally get you out of more prompts and other interface elements, although you should really know to reach for Emacs' C-g if that fails.

Also gets rid of highlighting Evil's search results with a hit of the escape key.

#+name: improve-escape
#+begin_src emacs-lisp
  (use-package emacs
    :init
    (advice-add 'evil-force-normal-state :after #'evil-ex-nohighlight)
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit))
#+end_src

*** Better Variable Setter

This variable setter from General allows you to treat custom and non-custom variables the same in Emacs.

#+name: set-var
#+begin_src emacs-lisp
  (defalias 'set-var 'general-setq)
#+end_src

*** Project

Project is Emacs' built-in library for managing "projects"--collections of related files, usually all under the same directory.

**** Open A File On Project Open

When I open a project, I usually want to open a file immediately. Let's set that.

#+NAME: customize-project
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    (set-var project-switch-commands 'project-find-file)
    :general
    (leader "SPC" '(project-find-file :which-key "Find file in current project")))
#+END_SRC

**** Project Commands to Bind Later

- =project-eshell=
- =project-remember-under=
- =project-find-file=
- =project-remove=

*** Package Installation System

**** Package Installation Basics

Set up package installation, as well as draw from the repository for non-GNU packages.

#+NAME: package-setup
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (package-refresh-contents)
#+END_SRC

**** A More Mature System

What we want is, ideally, for Emacs to:

- Configure its packages using a clean, extensible, and already well extended system. (=use-package=, now included in Emacs)
- Make sure packages are always installed, particularly for when we set up a new system. (=use-package-ensure=)
- Get packages from version control systems when needed. (=vc-use-package=, soon to be included in Emacs)
- Auto-update packages on startup, and also on command.

#+NAME: mature-package-setup
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
  (require 'use-package-ensure)
  (set-var use-package-always-ensure t)
  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))
  (require 'vc-use-package)
  (use-package auto-package-update
    :init
    (defun crj--update-all-packages ()
      (interactive)
      (package-refresh-contents)
      (auto-package-update-now-async))
    :config
    (set-var auto-package-update-delete-old-versions t)
    (set-var auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC

*** Working With Non-Code Text

**** Org Mode

***** Org/Evil Integration

Let's integrate Evil Mode with Org mode with this nice package.

Mostly this is self-explanatory code if you dive into the variables. I do some extra keybinding work, including disabling their keybindings for some commands I like defined globally.

#+name: evil-org-mode-configuration
#+begin_src emacs-lisp
  (use-package evil-org
    :diminish
    :after (evil org)
    :init
    (add-hook 'org-mode-hook #'evil-org-mode)
    (set-var org-return-follows-link t
	     evil-org-use-additional-insert t)
    :config
    (evil-org-set-key-theme '(textobjects todo additional))
    (evil-define-key '(normal visual insert) 'evil-org-mode
      (kbd "C-S-k") nil
      (kbd "C-S-h") nil)
    :general
    (:keymaps 'org-mode-map
	      :states 'insert
	      "RET" #'evil-org-return)
    (:keymaps 'org-mode-map :states '(motion normal visual)
	      "gl" #'org-down-element
	      "gh" #'org-up-element
	      "gk" #'org-backward-element
	      "gj" #'org-forward-element))
#+end_src

***** Tangle Settings

For now, all we're specifying is that when a directory doesn't exist in a file path we're tangling, we should make that directory.

#+name: tangle-settings
#+begin_src emacs-lisp
  (use-package org
    :config
    (add-to-list 'org-babel-default-header-args '(:mkdirp . "yes")))
#+end_src

***** Emacs Lisp Code Block Settings

All Emacs Lisp should have lexical scope, by default.

#+name: lexical-scope
#+begin_src emacs-lisp
  (use-package org
    :init
    (set-var org-babel-default-header-args:emacs-lisp '((:lexical . "yes"))))
#+end_src

**** Markdown

The not-quite-as-good-as-Org-but-more-universally-spoken markup language.

Let's see if we can hit these customizations quickly. We:

- set ~gfm-mode~ to be the main mode we use for Markdown files. GFM is GitHub-Flavored Markdown, which is a reasonably popular extension of the Markdwon format.
- set a bunch of markdown-mode's configuration variables you can check out yourself
- make sure our fonts scale appropriately
- add a command to add a new heading, similar to org mode's approach (should definitely be refactored at some point)
- add a command to kill the quick note buffer
- set my favorite JS mode to run for JS code blocks: RJSX Mode
- allow promotion, demotion, and movement in insert state
- Add ~edit-indirect~, a package that allows you to edit an embedded code block in a dedicated code-oriented buffer in Markdown buffers, which is another, "Oh, cuuuute, it thinks it's Org Mode!" kind of feature.
- Add some Evil keybindings with Evil Markdown Mode.
#+name: markdown-setup
#+begin_src emacs-lisp
  (use-package markdown-mode
    :preface
    (defun crj-add-markdown-header ()
      "Add a markdown header after the current one, at the same level."
      (interactive)
      (let ((level (crj--get-markdown-level)))
	(when (thing-at-point-looking-at markdown-regex-header)
	  (forward-char))
	(if (re-search-forward markdown-regex-header nil t)
	    (forward-line -1)
	  (goto-char (point-max)))
	(markdown-insert-header level nil nil))
      (when (featurep 'evil)
	(evil-insert-state)))

    (defun crj--get-markdown-level ()
      "Helper function to get the current markdown heading level.

  Used by `crj-add-markdown-header'"
      (save-excursion
	(unless (thing-at-point-looking-at markdown-regex-header)
	  (re-search-backward markdown-regex-header nil t))
	(markdown-outline-level)))

    (defun crj-kill-quick-note ()
      "Kills the quick-note text and frame.

  Also saves it with its contents gone."
      (interactive)
      (kill-region (buffer-end -1) (buffer-end 1))
      (save-buffer)
      (delete-frame))
    :mode
    ("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . gfm-mode)
    ;; :gfhook
    ;; #'variable-pitch-mode
    :init
    (set-var markdown-indent-on-enter 'indent-and-new-item
	  markdown-list-indent-width 2
	  markdown-fontify-code-blocks-natively t
	  markdown-asymmetric-header t)
    :config
    (add-to-list 'markdown-code-lang-modes '("javascript" . rjsx-mode))
    :general
    (general-def 'insert markdown-mode-map
      "M-l" #'markdown-demote
      "M-h" #'markdown-promote
      "M-k" #'markdown-move-up
      "M-j" #'markdown-move-down)
    (general-def '(insert normal) markdown-mode-map
      "C-<return>" #'crj-add-markdown-header
      "C-c k" #'crj-kill-quick-note
      "C-c C-k" #'crj-kill-quick-note))

  (use-package edit-indirect)

  (use-package evil-markdown
    :diminish
    :vc (evil-markdown :url "https://www.github.com/Somelauw/evil-markdown")
    :after markdown-mode
    :ghook ('(markdown-mode-hook gfm-mode-hook))
    :general
    (:keymaps 'evil-markdown-mode-map
     :states '(insert emacs)
     "C-d" nil))
#+end_src

*** Avoiding Mixing Init File and Custom File

#+NAME: custom-file-setup
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    (set-var custom-file "~/.emacs.d/emacs-custom-file.el")
    (unless (file-exists-p custom-file)
      (write-region "" nil custom-file)))
#+END_SRC

*** Org Babel Settings

#+NAME: org-babel-settings
#+BEGIN_SRC emacs-lisp
  (require 'ob-shell)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (emacs-lisp . t)))
#+END_SRC


*** Evil Mode

**** Basic Setup

#+NAME: evil-mode
#+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
      (set-var evil-want-keybinding t
	       evil-want-fine-undo t
	       evil-undo-system 'undo-redo)
      :config (evil-mode 1))
#+END_SRC

**** Evil Bindings For Other Packages

This famous package contains Evil bindings for many many other packages.

#+name: evil-integration-with-third-party-packages
#+begin_src emacs-lisp :lexical yes
  (use-package evil-collection
    :diminish 'unimpaired
    :diminish 'evil-collection-unimpaired-mode
    :after evil
    :init
    (evil-collection-init)
    (evil-collection-quickrun-setup)
    :general
    (general-unbind '(normal visual motion) evil-collection-unimpaired-mode-map
      "]l"
      "[l"
      "[m"
      "]m"
      "[e"
      "]e")

    (general-def '(normal visual motion) :prefix "["
      "B" '(org-previous-block :which-key "Go to previous org block.")
      "m" '(evil-collection-unimpaired-move-text-up :which-key "Move text up.")
      "e" '(evil-collection-unimpaired-previous-error :which-key "Go to previous error."))
    (general-def '(normal visual motion) :prefix "]"
      "B" '(org-next-block :which-key "Go to next org block.")
      "m" '(evil-collection-unimpaired-move-text-down :which-key "Move text down.")
      "e" '(evil-collection-unimpaired-next-error :which-key "Go to next error.")))
    #+end_src

**** Evil-Style Commenting

Evil Nerd Commenter is a really great way to handle comments!

#+name: evil-style-commenting
#+begin_src emacs-lisp :lexical yes
  (use-package evil-nerd-commenter
    :after evil
    :general
    ([remap comment-line] #'evilnc-comment-or-uncomment-lines)
    (:keymaps 'normal :prefix "g"
     "c" '(evilnc-comment-operator :which-key "Toggle comment.")
     "C" '(evilnc-copy-and-comment-operator :which-key "Copy and comment.")
     "K" '(evilnc-comment-box :which-key "Create comment box."))
    (general-def 'normal evil-inner-text-objects-map
      "c" #'evilnc-inner-comment)
    (general-def 'normal evil-outer-text-objects-map
      "c" #'evilnc-outer-comment))
#+end_src

*** Some Sane Defaults

#+NAME: sane-defaults
#+BEGIN_SRC emacs-lisp
  (set-var inhibit-startup-message t
	visible-bell t)

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (global-display-line-numbers-mode 1)
#+END_SRC

*** Color Theme

#+NAME: color-theme
#+BEGIN_SRC emacs-lisp
  (set-var modus-themes-italic-constructs t
	modus-themes-bold-constructs t
	modus-themes-org-blocks 'gray-background
	modus-themes-completions (quote
				  ((matches . (intense background underline bold))
				   (selection . (accented intense bold))))

	modus-themes-headings '((0 . (variable-pitch  1.8))
				(1 . (variable-pitch  1.8))
				(2 . (variable-pitch  1.6))
				(3 . (variable-pitch  1.4))
				(4 . (variable-pitch  1.2))))

  (mapc #'disable-theme custom-enabled-themes)
  (load-theme 'modus-operandi t)
#+END_SRC

*** Remember Things

#+NAME: set-up-emacs-memory-systems
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (set-var history-length 100)
  (savehist-mode 1)
#+END_SRC

*** Completion

**** Minibuffer Completion

Vertico is a popular Emacs minibuffer search interface. It gives you a simple but powerful UI for accessing whatever you're looking to access, and it does it with a minimum of code, mostly focusing on extending the built-in Emacs interface. This makes it fast to use and, importantly, easy for the devs to debug.

What we'll do to configure it is:

- Set "reverse" as the default interface setup.
- Tun on the ability to toggle interface setup between reverse and regular view.
- Add the Vertico extension ~vertico-repeat~ and a keybinding to repeat previous searches.
- Set Emacs to remember that repeat history.
- Set the results of searches to wrap from bottom to top.
- Fix some weirdness caused by the interplay of directories and completion.
- Add keybindings for
  - more Vim-like ~j~/~k~ scrolling
  - scrolling by pages
  - going up a directory with a single delete

Here that all is:

#+name: minibuffer-selection-interface
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    (vertico-multiform-mode)
    (setq vertico-cycle t
	  vertico-multiform-categories '((t reverse)))

    :config
    (add-to-list 'load-path (expand-file-name "vertico/extensions/" user-emacs-directory))
    (require 'vertico-directory)
    (require 'vertico-repeat)
    (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'vertico-repeat-history))
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
    :general
    (leader "'" '(vertico-repeat-select :which-key "Repeat previous vertico searches."))
    (:keymaps 'vertico-map
     "C-k" #'vertico-next
     "C-j" #'vertico-previous
     "C-S-p" #'vertico-scroll-up
     "C-S-n" #'vertico-scroll-down
     "C-S-k" #'vertico-scroll-up
     "C-S-j" #'vertico-scroll-down
     "RET" #'vertico-directory-enter
     "DEL" #'vertico-directory-delete-char
     "M-DEL" #'vertico-directory-delete-word))
#+end_src

**** Filtering Minibuffer Searches

The Orderless package is powerful and fascinating. It decides how the data you're searching is filtered as you type, and you can even search in different ways in the same search.

Here's an example using the setup below.

- I start a fuzzy search for files in a project.
- I type in part of the name of the file I want to open.
- Then I notice that some similarly named results are in a directory I want to exclude.
- So I type in a ~!~ (a pretty universal developer symbol for "not") and the name of that directory, and those results are filtered out.
- Then I realize I want only files that are in a directory called controller. So I type ~^~ (developer for "starts with") and ~/controller~. Finally, I want only JavaScript files, so I type ~$~ (developer for "ends with") and then type ~js~, and boom!

Once you're used to this speedy filtering process, it /greatly/ cuts down on the time spent searching for whatever it is you want to do.

#+name: search-filtering
#+begin_src emacs-lisp
  (use-package orderless
    :init
    (defun crj--vertico-orderless-dispatch (pattern _index _total)
      "The set of dispatch commands I use for filtering searches.

  Taken from the Doom Emacs project, which has added so much useful configuration code to the Emacs world. Thanks, Doom contributors!"
      (cond
       ;; Ensure $ works with Consult commands, which add disambiguation suffixes
       ((string-suffix-p "$" pattern)
	`(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
       ;; Ignore single !
       ((string= "!" pattern) `(orderless-literal . ""))
       ;; Without literal
       ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
       ;; Character folding
       ((string-prefix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 1)))
       ((string-suffix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 0 -1)))
       ;; Initialism matching
       ((string-prefix-p "`" pattern) `(orderless-initialism . ,(substring pattern 1)))
       ((string-suffix-p "`" pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
       ;; Literal matching
       ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
       ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
       ;; Flex matching
       ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
       ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1)))))

    (set-var completion-ignore-case t
	  completion-styles '(orderless basic)
	  completion-category-defaults nil
	  orderless-component-separator "#"
	  orderless-style-dispatchers '(crj--vertico-orderless-dispatch)
	  orderless-matching-styles '(orderless-flex orderless-literal orderless-regexp)
	  completion-category-overrides '((file (styles partial-completion)))))

#+end_src

*** Index
*** Git

Like many (most?) emacsers, I use Magit to manage Git. It's the best interface to Git--as powerful as the CLI, with a better keyboard-driven interface.

Only some minor settings changes from the basic setup:

- Turn on insert state and off Copilot mode when writing Git commits. Though I know there are some AI features focused on commit messages and maybe I should check them out, right now plain Copilot is /really/ bad at commit messages.
- Make Magit a little more Evil by reclaiming the leader key, ~h~ and ~l~, and the low-digit count keys.
- Turn on confirmation.
- Make the window setup a little tidier.
- And add some shortcuts to both the general Magit menus and things I do more often, like clone and switch/create branches.
- Use a complimentary package to open the browser for the current repo--or even the current file and line.

#+name: magit
#+begin_src emacs-lisp
  (use-package magit
    :preface
    (defun crj--set-up-git-commit-buffer ()
      (evil-insert-state)
      (copilot-mode -1))

    :init
    (add-hook 'git-commit-mode-hook 'crj--set-up-git-commit-buffer)
    (set-var evil-collection-magit-want-horizontal-movement t
		  magit-bury-buffer-function #'magit-restore-window-configuration
		  magit-no-confirm nil
		  magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1
		  forge-add-default-bindings nil)
    :commands magit-status
    :general
    (:keymaps '(magit-mode-map
		   magit-blame-read-only-mode-map
		   magit-section-mode-map
		   magit-diff-mode-map)
     :states '(insert normal)
      "1" #'digit-argument
      "2" #'digit-argument
      "3" #'digit-argument
      "4" #'digit-argument)
    (with-editor-mode-map
     "C-c C-c" '(with-editor-finish :which-key "Finish editing.")
     "C-c c" '(with-editor-finish :which-key "Finish editing.")
     "C-c '" '(with-editor-finish :which-key "Finish editing.")
     "C-c k" '(with-editor-cancel :which-key "Cancel editing.")
     "C-c C-k" '(with-editor-cancel :which-key "Cancel editing."))
    (leader
      "gg" '(magit-status :which-key "Launch Git interface.")
      "gm" '(magit-dispatch :which-key "Show Git HUD.")
      "gb" '(magit-branch-or-checkout :which-key "Switch or create Git branch.")
      "gi" '(magit-init :which-key "Initialize a Git repo.")
      "gc" '(magit-clone :which-key "Git clone.")))

  (use-package browse-at-remote
    :general
    (leader "gr" '(browse-at-remote :which-key "Browse repo's remote.")))
#+end_src

** Things To Document

- Stuff from notes.md
- wormhole - apt install

** Things To Configure Next

- Magit
- Org
- Sync
- spell check
- AI
- syntax highlight symbols and numbers
- some basic menus and bindings
- Evil elisp bindings
- Evil bindings
  - evil collection
  - 3rd party evil stuff
  - other evil settings
  - my evil stuff
- emacs-in-vim-in-emacs
- helpful
- emacsclient
- sway
- Keyboard daemon to normalize Emacs keybindings everywhere (hawck)
- Completion
  - LSP
  - treesitter
  - Consult
  - Marginalia
  - Embark

** Index

Here is where I tangle all the source blocks in this file, in the order I'd like and to the files I want.

*** Bash Config

#+BEGIN_SRC sh :tangle ~/.bashrc :noweb tangle
  # ~/.bashrc: executed by bash(1) for non-login shells.
  # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
  # for examples

  # If not running interactively, don't do anything
  case $- in
      ,*i*) ;;
      ,*) return;;
  esac

  # don't put duplicate lines or lines starting with space in the history.
  # See bash(1) for more options
  HISTCONTROL=ignoreboth

  # append to the history file, don't overwrite it
  shopt -s histappend

  # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
  HISTSIZE=1000
  HISTFILESIZE=2000

  # check the window size after each command and, if necessary,
  # update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # If set, the pattern "**" used in a pathname expansion context will
  # match all files and zero or more directories and subdirectories.
  #shopt -s globstar

  # make less more friendly for non-text input files, see lesspipe(1)
  #[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  # set variable identifying the chroot you work in (used in the prompt below)
  if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
      debian_chroot=$(cat /etc/debian_chroot)
  fi

  # set a fancy prompt (non-color, unless we know we "want" color)
  case "$TERM" in
      xterm-color|*-256color) color_prompt=yes;;
  esac

  # uncomment for a colored prompt, if the terminal has the capability; turned
  # off by default to not distract the user: the focus in a terminal window
  # should be on the output of commands, not on the prompt
  #force_color_prompt=yes

  if [ -n "$force_color_prompt" ]; then
      if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	  # We have color support; assume it's compliant with Ecma-48
	  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	  # a case would tend to support setf rather than setaf.)
	  color_prompt=yes
      else
	  color_prompt=
      fi
  fi

  if [ "$color_prompt" = yes ]; then
      PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
  else
      PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
  fi
  unset color_prompt force_color_prompt

  # If this is an xterm set the title to user@host:dir
  case "$TERM" in
      xterm*|rxvt*)
	  PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
	  ;;
      ,*)
	  ;;
  esac

  # enable color support of ls and also add handy aliases
  if [ -x /usr/bin/dircolors ]; then
      test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
      alias ls='ls --color=auto'
      #alias dir='dir --color=auto'
      #alias vdir='vdir --color=auto'

      #alias grep='grep --color=auto'
      #alias fgrep='fgrep --color=auto'
      #alias egrep='egrep --color=auto'
  fi

  # colored GCC warnings and errors
  #export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

  # some more ls aliases
  #alias ll='ls -l'
  #alias la='ls -A'
  #alias l='ls -CF'

  # Alias definitions.
  # You may want to put all your additions into a separate file like
  # ~/.bash_aliases, instead of adding them here directly.
  # See /usr/share/doc/bash-doc/examples in the bash-doc package.

  if [ -f ~/.bash_aliases ]; then
      . ~/.bash_aliases
  fi

  # enable programmable completion features (you don't need to enable
  # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
  # sources /etc/bash.bashrc).
  if ! shopt -oq posix; then
      if [ -f /usr/share/bash-completion/bash_completion ]; then
	  . /usr/share/bash-completion/bash_completion
      elif [ -f /etc/bash_completion ]; then
	  . /etc/bash_completion
      fi
  fi

  <<keychain-settings>>
#+END_SRC

*** Emacs Config

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :noweb tangle
  <<define-leader-key>>
  <<set-var>>
  <<lexical-scope>>
  <<package-setup>>
  <<mature-package-setup>>
  <<custom-file-setup>>
  <<evil-mode>>
  <<evil-integration-with-third-party-packages>>
  <<evil-style-commenting>>
  <<sane-defaults>>
  <<color-theme>>
  <<set-up-emacs-memory-systems>>
  <<customize-project>>
  <<minibuffer-selection-interface>>
  <<search-filtering>>
  <<in-buffer-completion>>
  <<improve-escape>>
  <<line-number-settings>>
  <<markdown-setup>>
  <<org-look-and-feel>>
  <<font-definitions>>
  <<theme>>
  <<set-fixed-pitch-modes>>
  <<make-line-numbers-monospaced>>
  <<evil-org-mode-configuration>>
  <<tangle-settings>>
  <<variable-pitch-setup>>
  <<word-wrap>>
  <<magit>>
#+END_SRC

